syntax = "proto3";

package envoy.config.filter.http.lua.v2;

option java_outer_classname = "LuaProto";
option java_multiple_files = true;
option java_package = "io.envoyproxy.envoy.config.filter.http.lua.v2";

import "validate/validate.proto";

// [#protodoc-title: Lua]
// Lua :ref:`configuration overview <config_http_filters_lua>`.
// [#extension: envoy.filters.http.lua]

message Lua {
  // The Lua code that Envoy will execute. This can be a very small script that
  // further loads code from disk if desired. Note that if JSON configuration is used, the code must
  // be properly escaped. YAML configuration may be easier to read since YAML supports multi-line
  // strings so complex scripts can be easily expressed inline in the configuration.
  string inline_code = 1 [(validate.rules).string = {min_bytes: 1}];

  map<string, string> inline_codes = 2;
}

message LuaPerRoute {
  oneof override {
    option (validate.required) = true;

    // Disable the buffer filter for this particular vhost or route.
    bool disabled = 1 [(validate.rules).bool = {const: true}];

    // Use the code in inline codes using this name.
    string lua_code_name = 2 [(validate.rules).string = {min_bytes: 1}];
  }
}
